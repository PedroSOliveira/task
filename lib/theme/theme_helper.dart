import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
// import 'package:fluttertoast/fluttertoast.dart';

import 'package:task/utils/pref_utils.dart';

import 'package:flutter/foundation.dart' as foundation;
import 'package:task/utils/size_utils.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  final _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray10002,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          elevation: 0,
          backgroundColor: appTheme.gray10002,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray300,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.onSecondaryContainer,
          fontSize: 16.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.onSecondaryContainer,
          fontSize: 14.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: colorScheme.onSecondaryContainer,
          fontSize: 34.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.onSecondaryContainer,
          fontSize: 28.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onSecondaryContainer,
          fontSize: 24.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray40001,
          fontSize: 13.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onSecondaryContainer,
          fontSize: 22.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onSecondaryContainer,
          fontSize: 18.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF7577B0),
    primaryContainer: Color(0XFFFFFFFF),
    secondary: Color(0XFFFFFFFF),
    secondaryContainer: Color(0XFFE5252A),
    tertiary: Color(0XFFFFFFFF),
    tertiaryContainer: Color(0XFFE5252A),

    // Background colors
    background: Color(0XFFFFFFFF),

    // Surface colors
    surface: Color(0XFFFFFFFF),
    surfaceTint: Color(0XFFFFFFFF),
    surfaceVariant: Color(0XFFE5252A),

    // Error colors
    error: Color(0XFFFFFFFF),
    errorContainer: Color(0XFFE5252A),
    onError: Color(0XFFE5252A),
    onErrorContainer: Color(0XFF030401),

    // On colors(text colors)
    onBackground: Color(0XFFE5252A),
    onInverseSurface: Color(0XFFE5252A),
    onPrimary: Color(0XFFFFFFFF),
    onPrimaryContainer: Color(0XFFE5252A),
    onSecondary: Color(0XFFE5252A),
    onSecondaryContainer: Color(0XFF030401),
    onTertiary: Color(0XFFE5252A),
    onTertiaryContainer: Color(0XFF030401),

    // Other colors
    outline: Color(0XFFFFFFFF),
    outlineVariant: Color(0XFFFFFFFF),
    scrim: Color(0XFFFFFFFF),
    shadow: Color(0XFFFFFFFF),

    // Inverse colors
    inversePrimary: Color(0XFFFFFFFF),
    inverseSurface: Color(0XFFFFFFFF),

    // Pending colors
    onSurface: Color(0XFFE5252A),
    onSurfaceVariant: Color(0XFF030401),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);
  Color get buttonColor => Color(0XFF7577B0);

  // Blue
  Color get blueA200 => Color(0XFF5186EE);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray300 => Color(0XFFA3A3B5);
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray50 => Color(0XFFF1F1F1);
  Color get bgColor => Color(0XFFFFFFFF);
  Color get black10 => Color(0XFFF4F4F4);
  Color get black20 => Color(0XFFDCDCDC);
  Color get black30 => Color(0XFFB0B0B0);
  Color get black40 => Color(0XFF696969);
  Color get blackGray => Color(0XFFE8E8E6);
  Color get shadowColor => Color(0XFF969696);

  // DeepOrange
  Color get deepOrange100 => Color(0XFFF5BFBF);
  Color get deepOrange50 => Color(0XFFFFE5E5);
  Color get deepOrange5001 => Color(0XFFFBE7E7);
  Color get deepBlue => Color(0XFFD2D5F6);

  // DeepPurple
  Color get deepPurple400 => Color(0XFF8153BA);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get borderColor => Color(0XFFC0C0C0);
  Color get gray10001 => Color(0XFFF6F6F6);
  Color get gray10002 => Color(0XFFF7F7F7);
  Color get gray200 => Color(0XFFF1F1EF);
  Color get gray300 => Color(0XFFDBDBDB);
  Color get gray400 => Color(0XFFC0BFBF);
  Color get gray40001 => Color(0XFFB0AFAF);
  Color get gray50 => Color(0XFFF8F8FE);
  Color get gray50014 => Color(0X14959595);
  Color get gray5001 => Color(0XFFF8F8FF);
  Color get gray5002 => Color(0XFFF4F5FF);
  Color get gray700 => Color(0XFF696969);
  Color get lightGray => Color(0XFFF8F8F8);
  Color get lightBlack => Color(0XFFF8F8F8);

  // Indigo
  Color get indigo100 => Color(0XFFD1D5F6);
  Color get indigo400 => Color(0XFF535DBA);
  Color get indigo50 => Color(0XFFEBEBF3);
  Color get indigo5001 => Color(0XFFE9EBFF);
  Color get indigo5002 => Color(0XFFE7E8F8);
  Color get indigo5003 => Color(0XFFE6E6EC);
  Color get indigo5004 => Color(0XFFE5E7FF);

  // Purple
  Color get purple400 => Color(0XFFBA53AF);
  Color get purple50 => Color(0XFFFEE5FF);
  Color get purple5001 => Color(0XFFF2E5FF);
  Color get lightPurple => Color(0XFFE5E8FF);
  Color get lightskin => Color(0XFFFFE5E5);
  Color get purple => Color(0XFFF2E5FF);

  // Red
  Color get red400 => Color(0XFFBA5353);
  Color get red500 => Color(0XFFF14336);
  Color get red50001 => Color(0XFFFF3D3D);
  Color get red700 => Color(0XFFD83636);
  Color get red => Color(0XFFD93636);
  Color get white => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
closeApp() {
  Future.delayed(const Duration(milliseconds: 1000), () {
    SystemNavigator.pop();
  });
}

setSafeAreaColor(){
  SystemChrome.setSystemUIOverlayStyle(

    SystemUiOverlayStyle(
      statusBarColor:appTheme.white,
      statusBarIconBrightness: Brightness.dark,
      systemNavigationBarColor: appTheme.bgColor,
      systemNavigationBarIconBrightness: Brightness.dark,
    ),
  );
}